(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fix, fs;



fix = "interface ArrayBufferView {}\ndeclare var ArrayBufferView: {};\n\ninterface ArrayBuffer {}\ndeclare var ArrayBuffer: {};\n\ninterface Uint8Array {}\ndeclare var Uint8Array: {};\n\ninterface Int32Array {}\ndeclare var Int32Array: {};\n\ninterface Float32Array {}\ndeclare var Float32Array: {};";

SupAPI.registerPlugin('typescript', 'socket.io-client', {
  defs: "// Type definitions for socket.io-client 1.2.0\n// Project: http://socket.io/\n// Definitions by: PROGRE <https://github.com/progre/>\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\n\ndeclare var io: SocketIOClientStatic;\n\ndeclare module 'socket.io-client' {\n    export = io;\n}\n\ninterface SocketIOClientStatic {\n    (host: string, details?: any): SocketIOClient.Socket;\n    (details?: any): SocketIOClient.Socket;\n    connect(host: string, details?: any): SocketIOClient.Socket;\n    connect(details?: any): SocketIOClient.Socket;\n    protocol: number;\n    Socket: { new (...args: any[]): SocketIOClient.Socket };\n    Manager: SocketIOClient.ManagerStatic;\n}\n\ndeclare module SocketIOClient {\n    interface Socket {\n        on(event: string, fn: Function): Socket;\n        once(event: string, fn: Function): Socket;\n        off(event?: string, fn?: Function): Socket;\n        emit(event: string, ...args: any[]): Socket;\n        listeners(event: string): Function[];\n        hasListeners(event: string): boolean;\n        connected: boolean;\n    }\n\n    interface ManagerStatic {\n        (url: string, opts: any): SocketIOClient.Manager;\n        new (url: string, opts: any): SocketIOClient.Manager;\n    }\n\n    interface Manager {\n        reconnection(v: boolean): Manager;\n        reconnectionAttempts(v: boolean): Manager;\n        reconnectionDelay(v: boolean): Manager;\n        reconnectionDelayMax(v: boolean): Manager;\n        timeout(v: boolean): Manager;\n    }\n}\n"
});

SupAPI.registerPlugin('typescript-server', 'socket.io', {
  defs: "// Type definitions for socket.io 1.2.0\n// Project: http://socket.io/\n// Definitions by: PROGRE <https://github.com/progre/>\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\n\n///<reference path='../node/node.d.ts' />\ndeclare var ioServer: SocketIOStatic;\n\ndeclare module 'socket.io' {\n    var server: SocketIOStatic;\n\n    export = ioServer;\n}\n\ninterface SocketIOStatic {\n    (): SocketIO.Server;\n    (srv: any, opts?: any): SocketIO.Server;\n    (port: number, opts?: any): SocketIO.Server;\n    (opts: any): SocketIO.Server;\n\n    listen: SocketIOStatic;\n}\n\ndeclare module SocketIO {\n    interface Server {\n        serveClient(v: boolean): Server;\n        path(v: string): Server;\n        adapter(v: any): Server;\n        origins(v: string): Server;\n        sockets: Namespace;\n        attach(srv: any, opts?: any): Server;\n        attach(port: number, opts?: any): Server;\n        listen(srv: any, opts?: any): Server;\n        listen(port: number, opts?: any): Server;\n        bind(srv: any): Server;\n        onconnection(socket: any): Server;\n        of(nsp: string): Namespace;\n        emit(name: string, ...args: any[]): Socket;\n        use(fn: Function): Namespace;\n\n        on(event: 'connection', listener: (socket: Socket) => void): Namespace;\n        on(event: 'connect', listener: (socket: Socket) => void): Namespace;\n        on(event: string, listener: Function): Namespace;\n    }\n\n    interface Namespace extends NodeJS.EventEmitter {\n        name: string;\n        connected: { [id: string]: Socket };\n        use(fn: Function): Namespace;\n\n        on(event: 'connection', listener: (socket: Socket) => void): Namespace;\n        on(event: 'connect', listener: (socket: Socket) => void): Namespace;\n        on(event: string, listener: Function): Namespace;\n    }\n\n    interface Socket {\n        rooms: string[];\n        client: Client;\n        conn: any;\n        request: any;\n        id: string;\n        emit(name: string, ...args: any[]): Socket;\n        join(name: string, fn?: Function): Socket;\n        leave(name: string, fn?: Function): Socket;\n        to(room: string): Socket;\n        in(room: string): Socket;\n        send(...args: any[]): Socket;\n        write(...args: any[]): Socket;\n\n        on(event: string, listener: Function): Socket;\n        once(event: string, listener: Function): Socket;\n        removeListener(event: string, listener: Function): Socket;\n        removeAllListeners(event: string): Socket;\n        broadcast: Socket;\n        volatile: Socket;\n        connected: boolean;\n        disconnect(close?: boolean): Socket;\n    }\n\n    interface Client {\n        conn: any;\n        request: any;\n    }\n}\n"
});

SupAPI.registerPlugin('typescript-server', 'http-server', {
  code: "function createServer(){\n  var http = require('http');\n  return http.createServer()\n}",
  defs: "declare function createServer(): any;"
});



},{}]},{},[1]);
